#!/usr/bin/env python
import json
import subprocess, shlex
import os
from tempfile import NamedTemporaryFile as ntf
from collections import defaultdict
import hvac

def read_all_with_name(path):
    d = list_path(path)
    _data = defaultdict(list)
    for x in d:
        _path = os.path.join(path, x)
        base_path = os.path.basename(_path)
        _data[base_path].append(get_secrets_from_path(_path))
    return _data

def read_all(path):
    d = list_path(path)
    _data = list()
    for x in d:
        _path = os.path.join(path, x)
        # base_path = os.path.basename(_path)
        _data.append(get_secrets_from_path(_path))
    return _data

def list_path(path):
    return hvac.Client(
        url=os.environ.get("VAULT_ADDR"),
        token=os.environ.get("VAULT_TOKEN")
    ).list(path).get("data").get("keys")


def get_secrets_from_path(path):
    return hvac.Client(
        url=os.environ.get("VAULT_ADDR"),
        token=os.environ.get("VAULT_TOKEN")
    ).read(path).get("data")


def delete_path(path):
    return hvac.Client(
        url=os.environ.get("VAULT_ADDR"),
        token=os.environ.get("VAULT_TOKEN")
    ).read(path).get("data")


def edit_secrets(secrets):
    _ntf = ntf(mode="w", delete=False)
    if 'data' in secrets:
        _d = secrets.get('data')
    else:
        _d = secrets
    _ntf.write(json.dumps(_d, separators=(',',':'), indent=4, sort_keys=True))
    _ntf.close()
    return _ntf.name


def save_secrets(path, var, val):
    try:
        _data = get_secrets_from_path(path)
    except Exception:
        _data = dict()
    _data[var] = val
    tmp_secrets_file = edit_secrets(_data)
    secrets = dict()
    secrets[var] = val
    hvac.Client(
        url=os.environ.get("VAULT_ADDR"),
        token=os.environ.get("VAULT_TOKEN")
    ).write(
        path,
        **secrets
    )
    


def get_secret_from_path_with_var(path, var):
    _secrets = get_secrets_from_path(path)
    return _secrets.get(var)


def main():
    module = AnsibleModule(
        argument_spec = dict(
            path = dict(required=True),
            attr = dict(required=True),
            fact = dict(required=False),
            vault_addr = dict(required=False),
            vault_token = dict(required=False),
            vault_skip_verify = dict(required=False),
        )
    )

    for k, v in {k:v for k, v in module.params.items() if 'vault' in k}.items():
        if v:
            os.environ[k.upper()] = v

    path = module.params.get('path')
    fact = module.params.get('fact')
    attr = module.params.get('attr')

    
    try:
        d = dict()
        d[fact] = get_secret_from_path_with_var(path, attr)
        module.exit_json(changed=False, ansible_facts=d)
    except Exception, e:
        module.fail_json(changed=False, msg=str(e))


from ansible.module_utils.basic import AnsibleModule
if __name__ == '__main__':
    main()



    